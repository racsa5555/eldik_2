import asyncio 

import pandas as pd
from aiogram import Bot, Dispatcher
from aiogram import types
from aiogram.types import Message,CallbackQuery
from aiogram.filters import CommandStart,Command
from aiogram import F

from decouple import config

from aiogram.fsm.context import FSMContext

from goole_sheet import register_client,find_order_by_id,update_google_sheet,update_client_by_id,append_products,find_user_by_data, sort_status
from goole_sheet.sheet import send_notification, set_client_id_to_product
from states import UserState,Calculator,Admin,Track_code,RegisterState
from kbds import *
from utils import get_users, write_user_in_file
from variables import *


TOKEN = config('TOKEN')

bot = Bot(TOKEN)

dp = Dispatcher()

id = 1000

@dp.message(CommandStart())
async def start(message: types.Message,state:FSMContext):
    language_kb = InlineKeyboardBuilder(
    markup=[
        [InlineKeyboardButton(text = 'üá∑üá∫',callback_data='lang_RU'),
        InlineKeyboardButton(text = 'üá∞üá¨',callback_data='lang_KG')]
    ])
    ref = message.text.split()
    if len(ref) == 2:
        if ref[1] == 'wsayMHwjKHdY':
            await state.update_data(ref = ref[1])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢–∏–ª–¥–∏ —Ç–∞–Ω–¥–∞“£—ã–∑:", reply_markup=language_kb.as_markup())


@dp.callback_query(lambda query: query.data.startswith('lang_'))
async def set_lang(callback:CallbackQuery,state:FSMContext):
    await state.update_data(language=callback.data[-2:])
    data = await state.get_data()
    if not (data.get('id') == None):
        if data['language'] == 'RU':
            await callback.message.answer(text = '–í—ã —Å–º–µ–Ω–∏–ª–∏ —è–∑—ã–∫ –Ω–∞ –†—É—Å—Å–∫–∏–π',reply_markup = default_kb_ru)
        else:
            await callback.message.answer(text = '–°–∏–∑ —Ç–∏–ª–¥–∏ –ö—ã—Ä–≥—ã–∑—á–∞–≥–∞ –∞–ª–º–∞—à—Ç—ã—Ä–¥—ã“£—ã–∑',reply_markup = default_kb_kg)
    else:
        await hi(callback.message,state)


@dp.callback_query(lambda query: query.data.startswith('switch_language_'))
async def set_l(callback:CallbackQuery,state:FSMContext):
    await set_lang(callback,state)


@dp.callback_query(lambda query: query.data == 'update_profile')
async def set_bish(callback:CallbackQuery,state:FSMContext):
    data = await state.get_data()
    await state.update_data(update = True)
    if data['language'] == 'RU':
        await callback.message.answer(text = '–° –∫–∞–∫–æ–≥–æ –í—ã –≥–æ—Ä–æ–¥–∞?',reply_markup=set_city_kb.as_markup())
    else:
        await callback.message.answer(text = '–ö–∞–π—Å—ã–ª —à–∞–∞—Ä–¥–∞–Ω –±–æ–ª–æ—Å—É–∑?',reply_markup=set_city_kb.as_markup())


@dp.message(UserState.hi)
async def hi(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    if data.get('language') == 'RU':
        data.pop('language')
        if not data or len(data) == 1:
            await message.answer(text = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã\n–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–ª–∏ –≤–æ–π—Ç–∏',reply_markup = login_or_register_ru)
        else:
            await message.answer(text = '–í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç')
    else:
        data.pop('language')
        if not data or len(data) == 1:
            await message.answer(text = '–°–∞–ª–∞–º–∞—Ç—Å—ã–∑–±—ã\n–ë–æ—Ç—Ç—É –∏—à—Ç–µ—Ç“Ø“Ø–≥”© —á–µ–π–∏–Ω —Å”©—Å—Å“Ø–∑ –∫–∞—Ç—Ç–∞–ª—ã–ø –∞–ª—ã—à—ã“£—ã–∑ –∫–µ—Ä–µ–∫ –∂–µ –∫–∏—Ä“Ø“Ø',reply_markup = login_or_register_kg)
        else:
            await message.answer(text = '–°–∏–∑ —É–∂–µ –∫–∞—Ç—Ç–∞–ª–≥—ã–Ω—Å—ã–∑')


@dp.message(F.text.in_({'–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é','–ö–∞—Ç—Ç–∞–ª—É—É'}))
async def register(message:Message,state:FSMContext):
    data = await state.get_data()
    if data['language'] == 'RU':
        await message.answer(text = '–° –∫–∞–∫–æ–≥–æ –í—ã –≥–æ—Ä–æ–¥–∞')
    else:
        await message.answer(text = '–ö–∞–π—Å—ã–ª —à–∞–∞—Ä–¥–∞–Ω –±–æ–ª–æ—Å—É–∑?')
    await state.set_state(UserState.city)


@dp.message(F.text.in_({'–í–æ–π—Ç–∏','–ö–∏—Ä—É—É'}))
async def login(message:Message, state: FSMContext):
    data = await state.get_data()
    if data.get('language', 'RU') == 'RU':
        await message.answer(text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',reply_markup=cancel_calc_ru)
    else:
        await message.answer(text = '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä–∏“£–∏–∑–¥–∏ –∂–∞–∑—ã–Ω—ã–∑',reply_markup=cancel_calc_kg)
    await state.set_state(RegisterState.phone_number)

@dp.message(RegisterState.phone_number)
async def set_ph_n(message:Message,state:FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞' or message.text == '–ê—Ä—Ç–∫–∞':
        await hi(message,state)
        return
    data = await state.get_data()
    await state.update_data(phone_number = message.text)
    if data['language'] == 'RU':
        text = '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥'
        mark = cancel_calc_ru
    else:
        text = '–ñ–µ–∫–µ –∫–æ–¥ –∂–∞–∑—ã–Ω—ã–∑'
        mark = cancel_calc_kg
    await message.answer(text = text,reply_markup=mark)
    await state.set_state(RegisterState.client_id)

@dp.message(RegisterState.client_id)
async def set_id(message:Message,state:FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞' or message.text == '–ê—Ä—Ç–∫–∞':
        await hi(message,state)
        return
    else:
        data = await state.get_data()
        phone_number = data.get('phone_number')
        client_id = message.text
        if data.get('language') == 'RU':
            await message.answer(text = '–û–±—Ä–∞–±–æ—Ç–∫–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...')
        else:
            await message.answer(text = '–ö“Ø—Ç“Ø–ø —Ç—É—Ä—É–Ω—É–∑...')
        res = find_user_by_data(phone_number,client_id,data['language'])
        if type(res) == dict:
            await state.set_data(res)
            await message.answer(text = send_profile(res),reply_markup=default_kb_ru)
            await state.set_state()
        else:
            await message.answer(text = res, reply_markup=cancel_calc_ru)

@dp.message(UserState.city)
async def set_bish(message:Message,state:FSMContext):
    await state.update_data(city = message.text)
    data = await state.get_data()
    if data['language'] == 'RU':
        await message.answer(text = '–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?')
    else:
        await message.answer(text = '–°–∏–∑–¥–∏–Ω –∞—Ç—ã“£—ã–∑ –∫–∏–º?')
    await state.set_state(UserState.name)

@dp.message(UserState.name)
async def set_name(message:Message,state:FSMContext):
    data = await state.get_data()
    if len(message.text.split()) == 1:
        await state.update_data(name = message.text)
        await state.set_state(UserState.full_name)
        if data['language'] == 'RU':
            await message.answer(text = '–ö–∞–∫ –í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è?')
        else:
            await message.answer(text = '–°–∏–∑–¥–∏–Ω —Ñ–∞–º–∏–ª–∏—è“£—ã–∑ –∫–∞–Ω–¥–∞–π?')
    else:
        if data['language'] == 'RU':
            await message.answer('‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ ‚ùóÔ∏è\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        else:
            await message.answer('‚ùóÔ∏è –¢—É—É—Ä–∞ —ç–º–µ—Å —Ñ–æ—Ä–º–∞—Ç ‚ùóÔ∏è\n–ö–∞–π—Ä–∞ –∂–∞–∑—ã–ø –∫”©—Ä“Ø–Ω“Ø–∑')


@dp.message(UserState.full_name)
async def set_full_name(message:Message,state:FSMContext):
    mas = message.text.split()
    fullname = ''.join(mas)
    await state.update_data(full_name = fullname)
    await state.set_state(UserState.phone_number)
    data = await state.get_data()
    if data['language'] == 'RU':
        await message.answer(text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞,\n–ø—Ä–∏–º–µ—Ä: 0700123456')
    else:
        await message.answer(text = '–°—É—Ä–∞–Ω—ã—á , —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä–∏–Ω–∏–∑–¥–∏ –∂–∞–∑—ã–Ω—ã–∑, \n –º–∏—Å–∞–ª—ã: 0700123456')


@dp.message(UserState.phone_number)
async def set_phone_number(message:Message,state:FSMContext):
    if message.text.isdigit():
        await state.update_data(phone_number = message.text)
        data = await state.get_data()
        update =  data.get('update')
        if update == True:
            fio = data.get('full_name') +' ' + data.get('name')
            data_new = {'–ì–æ—Ä–æ–¥':data.get('city'),
                        '–§–ò–û':fio,
                        '–ù–æ–º–µ—Ä':data.get('phone_number')}
            if data['language'] == 'RU':
                default_kb = default_kb_ru
                profile_kb = profile_kb_ru
                await message.answer(text = '‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è !',reply_markup=default_kb)
                await message.answer(text = send_profile(data),reply_markup=profile_kb.as_markup())
            else:
                default_kb = default_kb_kg
                profile_kb = profile_kb_kg
                await message.answer(text = '‚úÖ –ò–π–≥–∏–ª–∏–∫—Ç“Ø“Ø –ø—Ä–æ—Ñ–∏–ª—å–¥–∏ ”©–∑–≥”©—Ä—Ç“Ø–ø –∞–ª–¥—ã–Ω—ã–∑ !',reply_markup=default_kb)
                await message.answer(text = send_profile(data),reply_markup=profile_kb.as_markup())
            update_client_by_id('JKA'+ data.get('id'),data_new,data.get('ref'))
            await state.set_state()
        else:
            global id
            await state.update_data(id = 'JKA-'+str(id))
            id+=1
            data = await state.get_data()
            if data['language'] == 'RU':
                default_kb = default_kb_ru
                profile_kb = profile_kb_ru
                write_user_in_file(message.from_user.id)
                await message.answer(text = '‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è !',reply_markup=default_kb)
                await message.answer(text = send_profile(data),reply_markup=profile_kb.as_markup())
            else:
                default_kb = default_kb_kg
                profile_kb = profile_kb_kg
                write_user_in_file(message.from_user.id)
                await message.answer(text = '‚úÖ –ò–π–≥–∏–ª–∏–∫—Ç“Ø“Ø –∫–∞—Ç—Ç–æ–æ !',reply_markup=default_kb)
                await message.answer(text = send_profile(data),reply_markup=profile_kb.as_markup())
            data.update({'tg_id': message.from_user.id})
            register_client(data)
            await state.set_state()
    else:
        data = await state.get_data()
        if data['language'] == 'RU':
            await message.answer('‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ ‚ùóÔ∏è\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        else:
            await message.answer('‚ùóÔ∏è –¢—É—É—Ä–∞ —ç–º–µ—Å —Ñ–æ—Ä–º–∞—Ç ‚ùóÔ∏è\n–ö–∞–π—Ä–∞ –∂–∞–∑—ã–ø –∫”©—Ä“Ø–Ω“Ø–∑')

@dp.message(F.text[1:].in_({'–ü—Ä–æ—Ñ–∏–ª—å','–ö–∞—Ä–æ–æ'}))
async def get_profile(message:Message,state:FSMContext):
    data = await state.get_data()
    if data['language'] == 'RU':
        res = send_profile(data)
        profile_kb = profile_kb_ru
        await message.answer(text = res,reply_markup=profile_kb.as_markup())
    else:
        profile_kb = profile_kb_kg
        res = send_profile(data)
        await message.answer(text = res,reply_markup=profile_kb.as_markup())

@dp.message(F.text[1:].in_({'–ê–¥—Ä–µ—Å–∞','–î–∞—Ä–µ–∫'}))
async def get_address(message:Message,state:FSMContext):
    global ADRESS_KEMIN
    data = await state.get_data()
    lang = data.get('language')
    res = str(send_adress(data.get('id'),data.get('phone_number'),lang, ADRESS_KEMIN))
    await message.answer(text = res)
    await message.answer(text=dop_text)


@dp.message(F.text[1:].in_({'–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä','–≠—Å–µ–ø—Ç”©”©—á“Ø'}))
async def set_height(message:Message,state:FSMContext):
    data = await state.get_data()
    if data['language'] == 'RU':
        default_kb = default_kb_ru
        cancel_calc = cancel_calc_ru
        await message.answer(text = '–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å (–∫–≥)',reply_markup=cancel_calc)
        await state.set_state(Calculator.weight)
    else:
        default_kb = default_kb_kg
        cancel_calc = cancel_calc_kg
        await message.answer(text = '–°–∞–ª–º–∞–≥—ã–Ω –∂–∞–∑—ã–Ω—ã–∑ (–∫–≥)',reply_markup=cancel_calc)
        await state.set_state(Calculator.weight)

@dp.message(F.text[1:].in_({'–ê—Ä—Ç–∫–∞','–û—Ç–º–µ–Ω–∞'}))
async def cancel(message:Message,state:FSMContext):
    data = await state.get_data()
    default_kb = None
    if data['language'] == 'RU':
        default_kb = default_kb_ru
        await message.answer(text = '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ',reply_markup=default_kb)
    else:
        default_kb = default_kb_kg
        await message.answer(text = '–ê–∫—ã—Ä–∫—ã –∞—Ä–∞–∫–µ—Ç–∏“£–∏–∑–¥–∏ –∞—Ä—Ç–∫–∞ –∫–∞–π—Ç–∞—Ä–¥—ã“£—ã–∑',reply_markup=default_kb)
    await state.set_state()


@dp.message(Calculator.weight)
async def set_width(message:Message,state:FSMContext):
    if message.text.isdigit():
        await state.update_data(weight = int(message.text))
        data = await state.get_data()
        global PRICE_WEIGHT_KEMIN
        price_weight = PRICE_WEIGHT_KEMIN
        weight_price = data['weight'] * price_weight
        weight_price = round(weight_price, 1)
        data = await state.get_data()
        if data['language'] == 'RU':
            default_kb = default_kb_ru
            await message.answer(text = f'–í–∞—à–∞ —Ü–µ–Ω–∞: {weight_price} $',reply_markup=default_kb)
        else:
            default_kb = default_kb_kg
            await message.answer(text = f'–°–∏–∑–¥–∏–Ω –±–∞–∞“£—ã–∑: {weight_price} $',reply_markup=default_kb)
        await state.set_state()
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        default_kb = default_kb_ru
        await message.answer(text = '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ',reply_markup=default_kb)
        await state.set_state()
    elif message.text == '–ê—Ä—Ç–∫–∞': 
        default_kb = default_kb_kg
        await message.answer(text = '–ê–∫—ã—Ä–∫—ã –∞—Ä–∞–∫–µ—Ç–∏“£–∏–∑–¥–∏ –∞—Ä—Ç–∫–∞ –∫–∞–π—Ç–∞—Ä–¥—ã“£—ã–∑',reply_markup=default_kb)
        await state.set_state()
    else:
        await message.answer('‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ ‚ùóÔ∏è\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')



@dp.message(F.text[1:].in_({'–ú–µ–Ω–∏–Ω —Ç–æ–≤–∞—Ä–ª–∞—Ä—ã–º','–ú–æ–∏ –ø–æ—Å—ã–ª–∫–∏'}))
async def tracking(message:Message,state:FSMContext):
    data = await state.get_data()
    client_id = data.get('id')
    lang = data.get('language')
    if data.get('language') == 'RU':
        await message.answer(text = '–û–±—Ä–∞–±–æ—Ç–∫–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...')
    else:
        await message.answer(text = '–ö“Ø—Ç“Ø–ø —Ç—É—Ä—É–Ω—É–∑...')
    res = find_order_by_id(str(client_id),lang)
    await message.answer(text = res)


@dp.message(F.text[1:].in_({'–¢—Ä–µ–∫ –∫–æ–¥ –∫–æ—à—É—É','–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ –∫–æ–¥'}))
async def tracking_by_client_id(message:Message,state:FSMContext):
    data = await state.get_data()
    if data['language'] == 'RU':
        await message.answer(text = '–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞',reply_markup=cancel_calc_ru)
    else:
        await message.answer(text ='–¢–æ–≤–∞—Ä–¥—ã–Ω —Ç—Ä–µ–∫ –∫–æ–¥—É–Ω –∂–∞–∑—ã“£—ã–∑',reply_markup = cancel_calc_kg)
    await state.set_state(Track_code.track_code)


@dp.message(Track_code.track_code)
async def add_track_code(message:Message,state:FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        default_kb = default_kb_ru
        await message.answer(text = '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ',reply_markup=default_kb)
        await state.set_state()
    elif message.text == '–ê—Ä—Ç–∫–∞':
        default_kb = default_kb_kg
        await message.answer(text = '–ê–∫—ã—Ä–∫—ã –∞—Ä–∞–∫–µ—Ç–∏“£–∏–∑–¥–∏ –∞—Ä—Ç–∫–∞ –∫–∞–π—Ç–∞—Ä–¥—ã“£—ã–∑',reply_markup=default_kb)
        await state.set_state()
    track_code = message.text
    data = await state.get_data()
    client_id = data.get('id')
    res = set_client_id_to_product(track_code, str(client_id))
    if not res:
        if data['language'] == 'RU':
            text = '–¢—Ä–µ–∫ –∫–æ–¥ —Å —Ç–∞–∫–∏–º —Ç–æ–≤–∞—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω'
            kb = default_kb_ru
        else:
            text = '–ë—É–ª —Ç–æ–≤–∞—Ä —Ç–∞–±—ã–ª–≥–∞–Ω–∂–æ–∫'
            kb = default_kb_kg
        await message.answer(text=text, reply_markup=kb)
    else:
        if data['language'] == 'RU':
            text = '–¢—Ä–µ–∫ –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω'
            kb = default_kb_ru
        else:
            text = '–¢—Ä–µ–∫ –∫–æ–¥ –∫–æ—à—É–ª–¥—É'
            kb = default_kb_kg
        await message.answer(text=text, reply_markup=kb)
    await state.set_state()


@dp.message(Command(commands=['admin']))
async def admin_mode(message:Message,state:FSMContext):
    await message.answer(text = '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')
    await state.set_state(Admin.password)

@dp.message(Admin.password)
async def get_password(message:Message,state:FSMContext):
    if message.text == ADMIN_PASSWORD:
        await message.answer(text = '–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∞\n –û—Ç–ø—Ä–∞–≤—å—Ç–µ excel —Ç–∞–±–ª–∏—Ü—É —Å —Ç—Ä–µ–∫ –∫–æ–¥–∞–º–∏ –∏ —Å —Ç–µ–∫—Å—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞',reply_markup=set_variables_kbds.as_markup())
        await state.update_data(is_admin = True)
        await state.set_state()
    else:
        await message.answer(text = '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å,–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


@dp.callback_query(lambda query: query.data.startswith('set_'))
async def set_variables(callback:CallbackQuery,state:FSMContext):
    data = await state.get_data()
    if data.get('is_admin') == True:
        if callback.data == 'set_marketplace':
            await callback.message.answer(text = '–í—ã–±–µ—Ä–∏—Ç–µ —É –∫–∞–∫–æ–≥–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å —Å—Å—ã–ª–∫—É/—Ç–µ–∫—Å—Ç',reply_markup=set_marketplace.as_markup())
        if callback.data == 'set_prices':
            await callback.message.answer(text = '–í—ã–±–µ—Ä–∏—Ç–µ —É –∫–∞–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ',reply_markup=set_price.as_markup())
    else:
        await callback.message.answer(text = '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤')


@dp.callback_query(lambda query: query.data.startswith('r_'))
async def set_market(callback:CallbackQuery,state:FSMContext):
    data = await state.get_data()
    if data.get('is_admin') == True:
        await state.update_data(data = {'data':callback.data[2:]})
        await callback.message.answer(text = f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ {callback.data[2:]}')
        await state.set_state(Admin.set_price)
    else:
        await callback.message.answer(text = '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤')


@dp.callback_query(lambda query: query.data.startswith('reset_city_'))
async def reset_city(callback:CallbackQuery,state:FSMContext):
    data = await state.get_data()
    if data.get('is_admin') == True:
        await callback.message.answer(text = 'üë§ ËìùÂ§©LT01-{}\nüìû  15547009391\n{}: \nÂπø‰∏úÁúÅÂπøÂ∑ûÂ∏ÇÁôΩ‰∫ëÂå∫Ê±üÈ´òÈïáÂçóÂ≤ó‰∏âÂÖÉÂçóË∑ØÂπøÊñ∞ÂÖÉÁ¥†54Âè∑‰∫ëÂàõÊ∏Ø1119-ËìùÂ§©LT01Â∫ìÊàø-{} ({})')
        await state.update_data(data = {'data':callback.data[11:]})
        await state.set_state(Admin.set_price)
    else:
        await callback.message.answer(text = '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤')

@dp.callback_query(lambda query: query.data == 'reset_password')
async def reset_password(callback:CallbackQuery,state:FSMContext):
    data = await state.get_data()
    if data.get('is_admin') == True:
        await callback.message.answer(text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å')
        await state.update_data(data = {'data':'resetpassword'})
        await state.set_state(Admin.set_price)
    else:
        await callback.message.answer(text = '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤')


@dp.callback_query(lambda query: query.data == 're_whatsapp')
async def re_whatsapp(callback:CallbackQuery,state:FSMContext):
    data = await state.get_data()
    if data.get('is_admin') == True:
        await callback.message.answer(text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è Whatsapp')
        await state.update_data(data = {'data':'whatsapp'})
        await state.set_state(Admin.set_price)
    else:
        await callback.message.answer(text = '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤')

@dp.callback_query(lambda query: query.data.startswith('p_'))
async def set_price_v(callback:CallbackQuery,state:FSMContext):
    data = await state.get_data()
    if data.get('is_admin') == True:
        await state.update_data(data = {'data':callback.data[8:]})
        await callback.message.answer(text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
        await state.set_state(Admin.set_price)
    else:
        await callback.message.answer(text = '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤')


@dp.callback_query(lambda query: query.data == 'send_broadcast')
async def send_b(callback:CallbackQuery,state:FSMContext):
    data = await state.get_data()
    if data.get('is_admin') == True:
        await callback.message.answer(text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç—å')
        await state.set_state(Admin.news)
    else:
        await callback.message.answer(text = '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤')


@dp.message(Admin.news)
async def send_new(message:Message,state:FSMContext):
    data = await state.get_data()
    if data.get('is_admin') == True:
        text = message.text
        await send_news(text)
        await message.answer(text = '–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–∞')
        await state.set_state()
    else:
        await message.answer(text = '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤')


@dp.message(Admin.set_price)
async def set_price_v2(message:Message,state:FSMContext):
    data = await state.get_data()
    if data.get('is_admin') == True:
        new_value = message.text    
        global PRICE_WEIGHT_KEMIN
        global TAOBAO
        global ONE_AND_SIX
        global PINDUODUO
        global POIZON
        global LINK_WHATSAPP
        global ADMIN_PASSWORD
        global ADRESS_BISH
        if '_' in data['data']:
            if data['data'] == 'weight_kemin':
                PRICE_WEIGHT_KEMIN = float(new_value)
            await message.answer(text = '–í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ —Ü–µ–Ω—É')
        elif data['data'] == 'whatsapp':
            LINK_WHATSAPP = new_value
            await message.answer(text = '–í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ whatsapp')
        elif data['data'] == 'resetpassword':
            ADMIN_PASSWORD = new_value
            await message.answer(text = '–í—ã —Å–º–µ–Ω–∏–ª–∏ –ø–∞—Ä–æ–ª—å')
        if data['data'] == 'kemin':
            ADRESS_KEMIN = str(new_value)
            await message.answer(text = '–í—ã —Å–º–µ–Ω–∏–ª–∏ –∞–¥—Ä–µ—Å –ö–µ–º–∏–Ω')
        else:
            if data['data'] == 'taobao':
                TAOBAO = new_value
            elif data['data'] == 'pinduoduo':
                PINDUODUO = new_value
            elif data['data'] == 'poizon':
                POIZON = new_value
            elif data['data'] == '1688':
                ONE_AND_SIX = new_value        
            await message.answer(text = '–í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ —Å—Å—ã–ª–∫—É')
        await state.set_state()
    else:
        await message.answer(text = '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤')



@dp.message(F.document)
async def handle_admin_documents(message: types.Message, state: FSMContext):
    data = await state.get_data()
    statuses = {'–í –ü—É—Ç–∏','–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞', '–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ'}
    if data.get("is_admin") == True:
        if message.caption not in statuses:
            await message.answer(text = f'–í–≤–µ–¥–∏—Ç–µ –∫ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –æ–¥–∏–Ω –∏–∑ —Å—Ç–∞—Ç—É—Å–æ–≤:{statuses}')
        else:
            file_info = await bot.get_file(message.document.file_id)
            file_path = file_info.file_path
            file = await bot.download_file(file_path)
            df = pd.read_excel(file)
            data = df.iloc[:,:]
            new_status = message.caption
            if new_status == '–í –ü—É—Ç–∏':
                append_products(data)
                await message.answer('–í—Å–µ –≥–æ—Ç–æ–≤–æ,–ø—Ä–æ–≤–µ—Ä—å—Ç–µ')
            elif new_status == '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞':
                sort_status(data)
                await message.answer('–í—Å–µ –≥–æ—Ç–æ–≤–æ,–ø—Ä–æ–≤–µ—Ä—å—Ç–µ')
            else:
                await update_google_sheet(data,new_status, message.bot)
                await message.answer('–í—Å–µ –≥–æ—Ç–æ–≤–æ,–ø—Ä–æ–≤–µ—Ä—å—Ç–µ')
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞')


@dp.message(F.text[2:].in_({'–ü–æ–¥–¥–µ—Ä–∂–∫–∞','–ö–æ–ª–¥–æ–æ'}))
async def help(message:Message,state:FSMContext):
    data = await state.get_data()
    if data['language'] == 'RU':
        await message.answer(text = support_text)
    else:
        await message.answer(text = support_text)


@dp.message(F.text[1:].in_({'–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è','–ù—É—Å–∫–∞–º–∞'}))
async def send_video(message:Message,state:FSMContext):
    data = await state.get_data()
    if data.get('language') == 'RU': 
        await message.answer(text = '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å',reply_markup=instruction_kb.as_markup())
    else:
        await message.answer(text = '–°–∞–π—Ç —Ç–∞–Ω–¥–∞“£—ã–∑',reply_markup=instruction_kb.as_markup())


@dp.callback_query(lambda query: query.data.startswith('choose_'))
async def instruction(callback:CallbackQuery):
    data = callback.data[7:]
    if data == 'pin':
        await callback.message.answer(text = PINDUODUO)
    elif data == 'tao':
        await callback.message.answer(text = TAOBAO)
    elif data == '1688':
        await callback.message.answer(text = ONE_AND_SIX)
    elif data == 'poi':
        await callback.message.answer(text = POIZON)

async def send_news(message):
    users_ids = get_users()
    for user_id in users_ids:
        await bot.send_message(user_id,message)


@dp.callback_query(lambda query: query.data == 'logout_admin')
async def logout_admin(callback:CallbackQuery,state:FSMContext):
    await state.clear()
    await callback.message.answer(text = '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
    await state.set_state()

@dp.callback_query(lambda query: query.data == 'logout_profile')
async def logout_profile(callback:CallbackQuery,state:FSMContext):
    data = await state.get_data()
    if data['language'] == 'RU':
        await callback.message.answer(text = '–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è')
    else:
        await callback.message.answer(text = '–ü—Ä–æ—Ñ–∏–ª–¥–µ–Ω —á—ã–∫—Ç—ã–Ω—ã–∑')
    await state.clear()
    await state.update_data({'language':data['language']})
    await hi(callback.message,state)


@dp.callback_query(lambda query: query.data == 'send_delivered')
async def send_delivered(callback:CallbackQuery,state:FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫ –∫–æ–¥—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
    await state.set_state(Admin.send_delivered)

@dp.message(Admin.send_delivered)
async def send_deliv(message:Message,state:FSMContext):
    track_codes = message.text.split()
    results = []
    for code in track_codes:
        res = await send_notification(code, bot)
        results.append(res)
    result = '\n'.join(results)
    await message.answer(text=result)


@dp.message(Command(commands=['clear']))
async def clear(message:Message,state:FSMContext):
    await state.set_data({})
    await start(message,state)

@dp.message(F.text[1:].in_({'–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã','–¢—ã—é—É —Å–∞–ª—ã–Ω–≥–∞–Ω —Ç–æ–≤–∞—Ä–ª–∞—Ä'}))
async def zapret_tovars(message: Message):
    await message.answer(text=zapret_text)



@dp.message(F.text[1:].in_({'–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã','–¢—ã—é—É —Å–∞–ª—ã–Ω–≥–∞–Ω —Ç–æ–≤–∞—Ä–ª–∞—Ä'}))

async def main():
    await dp.start_polling(bot)



asyncio.run(main())
